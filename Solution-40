// Infix Evaluation

import java.io.*;	
import java.util.*;	
public class Main {	
    public static void main(String[] args) throws Exception {	
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));	
        String exp = br.readLine();	
        Stack < Integer > operand = new Stack < > ();	
        Stack < Character > optor = new Stack < > ();	
        for (int i = 0; i < exp.length(); i++) {	
            char ch = exp.charAt(i);	
            if (ch == '(') {	
                optor.push(ch);	
            } else if (Character.isDigit(ch)) {	
                operand.push(ch - '0');	
            } 
            else if (ch == '+' || ch == '-' || ch == '/' || ch == '*') {	
                while (optor.size() != 0 && optor.peek() != '(' && precedence(ch) <= precedence(optor.peek())){	
                    char optors = optor.pop();	
                    int v2 = operand.pop();	
                    int v1 = operand.pop();	
                    int val = operation(v1, v2, optors);	
                    operand.push(val);	
            }	
                optor.push(ch); // ch is pushing itself now after popping all the operators having priority greater than or equal to ch	
            }
            else if (ch == ')') {	
                while (optor.peek() != '(') {	
                    char optors = optor.pop();	
                    int v2 = operand.pop();	
                    int v1 = operand.pop();	
                    int val = operation(v1, v2, optors);	
                    operand.push(val);	
                }
                if(optor.size()>0){
                    optor.pop();
                }
            }
        }
        while (optor.size() != 0) {	
            char optors = optor.pop();	
            int v2 = operand.pop();	
            int v1 = operand.pop();	
            int val = operation(v1, v2, optors);	
            operand.push(val);	
        }	
        int oval = operand.pop();
        System.out.println(oval);	
    }	
    public static int operation(int v1, int v2, char optor) {	
        if (optor == '+') {	
            return v1 + v2;	
        } else if (optor == '-') {	
            return v1 - v2;	
        } else if (optor == '*') {	
            return v1 * v2;	
        } else {	
            return v1 / v2;	
        }	
    }	
    public static int precedence(char optor) {	
        if (optor == '+') {	
            return 1;	
        } else if (optor == '-') {	
            return 1;	
        } else if (optor == '*') {	
            return 2;	
        } else {	
            return 2;	
        }	
    }
}
